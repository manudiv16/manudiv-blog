[{"content":"Comenc√© a escribir este post, ya que me causo curiosidad el hecho que haya gente que use herramientas como gitmoji para darle m√°s sem√°ntica a sus commits.\nA partir de ah√≠ vi que la gente ha sentado unas convenciones para escribir mejores commits.Esto ayuda para la visibilidad de los equipos al leer los commits de otros compa√±eros que trabajan en la misma base de c√≥digo. Por otra parte, estos est√°ndares pueden ayudar en muchos m√°s entornos, para crear changelogs de la aplicaci√≥n automaticamente y en la parte de integraci√≥n, ya que al estandarizar podemos automatizar recursos que se activen en un momento espec√≠fico de del desarrollo, har√© m√°s incapie en este tema en las descripciones de cada convenci√≥n.\nEasy one \u0026lt;type\u0026gt;(optional scope): \u0026lt;description\u0026gt; [optional body] [optional footer] Las convenciones m√°s sencillas de seguir y las que recomendar√≠a para equipos peque√±os o side-projects ser√≠a la de conventional commits. Se basa en el uso de \u0026lsquo;fix:\u0026rsquo;, \u0026lsquo;feat\u0026rsquo; y \u0026lsquo;BREAKING CHANGE\u0026rsquo; o \u0026lsquo;!\u0026rsquo;, para discernir entre los tipos de tu commit. Como describ√≠a antes al asentar un est√°ndar podemos crear automatizaciones en nuestros flujos dependiendo del tipo de commit, en este caso podr√≠amos hacer una integraci√≥n en la cual se aumentara la versi√≥n de la release dependiendo del tipo.\nOtros tipos son bienvenidos, pero para controlar que cada programador comience a usar su creatividad ser√° mejor definirlos en el fichero de \u0026lsquo;CONTRIBUTING.md\u0026rsquo; o usar un lintr como commitlint.\nbuild - Build related changes chore - Build process or auxiliary tool changes docs - Documentation only changes feat - A new feature fix - A bug fix perf - A code change that improves performance refactor - A code change that neither fixes a bug or adds a feature revert - Reverting things style - Markup, white-space, formatting, missing semi-colons... test - Adding missing tests Otra cosa que nos puede ayudar cuando no est√° claro en el cuerpo del commit, en que parte del c√≥digo estamos trabajando, es el empleo del √°mbito(scope).\nfix(clients): syntax error, added semicolon Fix: Se usar√≠a para corregir un fallo en la base de c√≥digo y esto comportar√≠a en nuestra integraci√≥n con el cambio de release \u0026lsquo;PATCH\u0026rsquo;. # 0.0.1 -\u0026gt; 0.0.2 fix: syntax error, added semicolon Feat: Este cambio a√±adir√≠a cambios a nuestra base de c√≥digo y depender√° de s√≠ esta cambia el funcionamiento de la aplicaci√≥n que la combinaremos con un \u0026lsquo;BREAKING CHANGE\u0026rsquo; o una \u0026lsquo;!\u0026rsquo;. # 0.3.1 -\u0026gt; 0.4.0 Minor feat: added some logic to do something # 0.3.1 -\u0026gt; 1.0.0 Major feat!: added some logic removed support for ... El m√°s ca√≥tico Este m√©todo para estandarizar tus commits es el culpable de que est√© escribiendo esto, ya que llama mucho la atenci√≥n. Comenc√© a ver algunos repositorios donde se a√±ad√≠an emojis seguidos de la descripci√≥n, al principio cre√≠ que solo era un m√©todo para hacer m√°s fashion nuestros commits, pero tirado por la curiosidad fui a ver como a√±adir emojis y descubr√≠ el porqu√© de todo esto.\nEsta convenci√≥n me parece tan v√°lida como la otra e igual de adaptable a tus necesidades, aunque en algunos casos creo que el uso de emojis se pueda ver de forma clara el objetivo de cada uno como üêõ, üöë o ‚ú®; en otros no est√° tan claro, no olvidemos que en la industria es com√∫n tener equipos muy plurales y en diferentes culturas el uso de algunos emojis es totalmente diferente.\nAlgunos Tips Voy a dar algunos de los tips que m√°s he visto en los enlaces que dejo como referencias.\nUsar el verbo imperativo, git usa como est√°ndar el verbo imperativo para lanzar sus comandos y muchos siguen esto para la descripci√≥n, definiendo as√≠ el estado en el que queremos que este al realizar nuestros cambios.\nLongitud de la descripci√≥n y del cuerpo. La longitud de la descripci√≥n no deber√≠a de pasar de los 50 caracteres y el cuerpo puede extenderse hasta los 72 caracteres.\nCuando se agregue una descripci√≥n es mucho m√°s importante el porqu√© que el c√≥mo, normalmente los cambios son suficientemente explicativo, pero la raz√≥n de porque se lleg√≥ hacer de esa forma no.\nUso de herramientas como Commitizen, commitlint y \u0026lsquo;git hooks\u0026rsquo; nos pueden venir bien a la hora de mejorar en la construcci√≥n de nuestros commits.\nReferencias https://www.conventionalcommits.org https://gitmoji.dev/ https://cbea.ms/git-commit/ https://midu.dev/buenas-practicas-escribir-commits-git https://dev.to/helderburato/patterns-for-writing-better-git-commit-messages-4ba0 https://dev.to/wordssaysalot/art-of-writing-a-good-commit-message-56o7 https://github.com/RomuloOliveira/commit-messages-guide https://github.com/helderburato/dotfiles/blob/main/git/.gittemplates/commit https://hashnode.com/post/which-commit-message-convention-do-you-use-at-work-ck3e4jbdd00zyo4s1h7mc7e0g ","date":"2022-01-29T00:00:00Z","image":"https://manudev.dev/p/crear-mejores-commits/cherry-pick_hu3ab74cb674d6e6a31fcc43e13a33db89_108126_120x120_fill_box_smart1_3.png","permalink":"https://manudev.dev/p/crear-mejores-commits/","title":"Crear mejores commits"},{"content":"mkdir -p traefik/data/configurations touch traefik/data/{acme.json,traefik.yml} \\ traefik/docker-compose.yml \\ traefik/data/configurations/dynamic.yml chmod 600 traefik/data/acme.json traefik ‚îú‚îÄ‚îÄ data ‚îÇ¬†‚îú‚îÄ‚îÄ acme.json ‚îÇ¬†‚îú‚îÄ‚îÄ configurations ‚îÇ¬†‚îÇ¬†‚îî‚îÄ‚îÄ dynamic.yml ‚îÇ¬†‚îî‚îÄ‚îÄ traefik.yml ‚îî‚îÄ‚îÄ docker-compose.yml docker-compose.yml version: \u0026#39;3.7\u0026#39; services: traefik: image: traefik:latest restart: always security_opt: - no-new-privileges:true ports: - 80:80 - 443:443 volumes: - /etc/localtime:/etc/localtime:ro - /var/run/docker.sock:/var/run/docker.sock:ro - ./data/traefik.yml:/traefik.yml:ro - ./data/acme.json:/acme.json - ./data/configurations:/configurations networks: - proxy labels: - \u0026#34;traefik.enable=true\u0026#34; - \u0026#34;traefik.docker.network=proxy\u0026#34; - \u0026#34;traefik.http.routers.traefik-secure.entrypoints=websecure\u0026#34; - \u0026#34;traefik.http.routers.traefik-secure.rule=Host(`traefik.example.com`)\u0026#34; - \u0026#34;traefik.http.routers.traefik-secure.middlewares=user-auth@file\u0026#34; - \u0026#34;traefik.http.routers.traefik-secure.service=api@internal\u0026#34; networks: proxy: external: true traefik.yml api: dashboard: true entryPoints: web: address: :80 http: redirections: entryPoint: to: websecure websecure: address: :443 http: middlewares: - secureHeaders@file tls: certResolver: letsencrypt providers: docker: watch: true endpoint: \u0026#34;unix:///var/run/docker.sock\u0026#34; exposedByDefault: false file: filename: /configurations/dynamic.yml certificatesResolvers: letsencrypt: acme: email: admin@example.com storage: acme.json keyType: EC384 httpChallenge: entryPoint: web pilot: token: \u0026#34;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\u0026#34; dynamic.yml # Dynamic configuration http: middlewares: secureHeaders: headers: sslRedirect: true forceSTSHeader: true stsIncludeSubdomains: true stsPreload: true stsSeconds: 31536000 user-auth: basicAuth: users: # - \u0026#34;admin:admin\u0026#34; - \u0026#34;admin:$apr1$2alk61vd$FKIsRoz15pYd2QlRPFzTg/\u0026#34; tls: options: default: cipherSuites: - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305 - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305 minVersion: VersionTLS12 ","date":"2021-03-09T00:00:00Z","image":"https://manudev.dev/p/setup-traefik/pexels-davis-sanchez-1727004-min_hue01e93c837f06ae2a61fe0d618c6c73a_2454861_120x120_fill_q75_box_smart1.jpg","permalink":"https://manudev.dev/p/setup-traefik/","title":"Setup traefik"}]